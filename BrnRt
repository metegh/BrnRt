local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()
 
local Window = Library:CreateWindow{
    Title = `Rebellion {0.0.1}`,
    SubTitle = "by metegh",
    TabWidth = 160,
    Size = UDim2.fromOffset(830, 525),
    Resize = true, -- Resize this ^ Size according to a 1920x1080 screen, good for mobile users but may look weird on some devices
    MinSize = Vector2.new(470, 380),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.RightControl -- Used when theres no MinimizeKeybind
}

-- Fluent Renewed provides ALL 1544 Lucide 0.469.0 https://lucide.dev/icons/ Icons and ALL 9072 Phosphor 2.1.0 https://phosphoricons.com/ Icons for the tabs, icons are optional
local Tabs = {
    Main = Window:CreateTab{
        Title = "Main",
        Icon = "phosphor-users-bold"
    },
    Settings = Window:CreateTab{
        Title = "Settings",
        Icon = "settings"
    }
}

local Options = Library.Options

Library:Notify{
    Title = "Notification",
    Content = "This is a notification",
    SubContent = "SubContent", -- Optional
    Duration = 5 -- Set to nil to make the notification not disappear
}

local Paragraph = Tabs.Main:CreateParagraph("Paragraph", {
    Title = "Paragraph",
    Content = "This is a paragraph.\nSecond line!"
})

print(Paragraph.Value)

Paragraph:SetValue("This paragraph text is changed!")

print(Paragraph.Value)

Tabs.Main:CreateParagraph("Aligned Paragraph", {
    Title = "Paragraph",
    Content = "This is a paragraph with a center alignment!",
    TitleAlignment = "Middle",
    ContentAlignment = Enum.TextXAlignment.Center
})

Tabs.Main:CreateButton{
    Title = "Button",
    Description = "Very important button",
    Callback = function()
        Window:Dialog{
            Title = "Title",
            Content = "This is a dialog",
            Buttons = {
                {
                    Title = "Confirm",
                    Callback = function()
                        print("Confirmed the dialog.")
                    end
                },
                {
                    Title = "Cancel",
                    Callback = function()
                        print("Cancelled the dialog.")фlocal Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Script to enable steal prompts
local function findAndEnableStealPrompts()
    local allPrompts = {}
    
    local function searchInModel(model)
        for _, child in ipairs(model:GetDescendants()) do
            if child:IsA("ProximityPrompt") and child.Name == "StealPrompt" then
                table.insert(allPrompts, child)
            end
        end
    end
    
    searchInModel(workspace)
    
    for _, prompt in ipairs(allPrompts) do
        prompt.Enabled = true
    end
    
    return #allPrompts
end

-- Run the prompt enabler in a separate coroutine
coroutine.wrap(function()
    while true do
        findAndEnableStealPrompts()
        wait(5)
    end
end)()

-- Fluent UI Library
local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()
 
local Window = Library:CreateWindow{
    Title = `Rebellion {0.0.1}`,
    SubTitle = "by metegh",
    TabWidth = 160,
    Size = UDim2.fromOffset(830, 525),
    Resize = true,
    MinSize = Vector2.new(470, 380),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.RightControl
}

local Tabs = {
    Main = Window:CreateTab{
        Title = "Main",
        Icon = "phosphor-users-bold"
    },
    Settings = Window:CreateTab{
        Title = "Settings",
        Icon = "settings"
    }
}

local Options = Library.Options

Library:Notify{
    Title = "Notification",
    Content = "This is a notification",
    SubContent = "SubContent",
    Duration = 5
}

-- Character Collector Finder
local function findCharacterCollector(playerName)
    local plots = workspace:FindFirstChild("Plots")
    if not plots then
        Library:Notify{
            Title = "Error",
            Content = "Plots folder not found!",
            Duration = 5
        }
        return nil
    end
    
    -- Find player model
    local playerPlot
    for _, plot in ipairs(plots:GetChildren()) do
        if plot.Name:lower():find(playerName:lower()) then
            playerPlot = plot
            break
        end
    end
    
    if not playerPlot then
        Library:Notify{
            Title = "Error",
            Content = "Player plot not found!",
            Duration = 5
        }
        return nil
    end
    
    -- Find CharacterCollector part
    local collector = playerPlot:FindFirstChild("CharacterCollector", true)
    if not collector then
        Library:Notify{
            Title = "Error",
            Content = "CharacterCollector not found in player's plot!",
            Duration = 5
        }
        return nil
    end
    
    return collector
end

-- Create UI elements
local playerNameInput = Tabs.Main:CreateInput("PlayerName", {
    Title = "Player Name",
    Default = "",
    Placeholder = "Enter player name",
    Numeric = false,
    Finished = false
})

local findButton = Tabs.Main:CreateButton{
    Title = "Find CharacterCollector",
    Description = "Search for CharacterCollector in player's plot",
    Callback = function()
        local playerName = playerNameInput:GetValue()
        if playerName == "" then
            Library:Notify{
                Title = "Error",
                Content = "Please enter a player name!",
                Duration = 5
            }
            return
        end
        
        local collector = findCharacterCollector(playerName)
        if collector then
            Library:Notify{
                Title = "Success",
                Content = string.format("Found CharacterCollector at: %s", collector:GetFullName()),
                Duration = 5
            }
        end
    end
}

-- GoBack button replacement
Tabs.Main:CreateButton{
    Title = "GoBack",
    Description = "Return to previous menu",
    Callback = function()
        -- Add your GoBack functionality here
        Library:Notify{
            Title = "GoBack",
            Content = "GoBack button pressed",
            Duration = 2
        }
    end
}

-- Add other UI elements from your original script
local Toggle = Tabs.Main:CreateToggle("MyToggle", {Title = "Toggle", Default = false })
Toggle:OnChanged(function()
    print("Toggle changed:", Options.MyToggle.Value)
end)

-- Initialize managers
SaveManager:SetLibrary(Library)
InterfaceManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes{}
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Library:Notify{
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
}

SaveManager:LoadAutoloadConfig()фlocal Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Script to enable steal prompts
local function findAndEnableStealPrompts()
    local allPrompts = {}
    
    local function searchInModel(model)
        for _, child in ipairs(model:GetDescendants()) do
            if child:IsA("ProximityPrompt") and child.Name == "StealPrompt" then
                table.insert(allPrompts, child)
            end
        end
    end
    
    searchInModel(workspace)
    
    for _, prompt in ipairs(allPrompts) do
        prompt.Enabled = true
    end
    
    return #allPrompts
end

-- Run the prompt enabler in a separate coroutine
coroutine.wrap(function()
    while true do
        findAndEnableStealPrompts()
        wait(5)
    end
end)()

-- Fluent UI Library
local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()
 
local Window = Library:CreateWindow{
    Title = `Rebellion {0.0.1}`,
    SubTitle = "by metegh",
    TabWidth = 160,
    Size = UDim2.fromOffset(830, 525),
    Resize = true,
    MinSize = Vector2.new(470, 380),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.RightControl
}

local Tabs = {
    Main = Window:CreateTab{
        Title = "Main",
        Icon = "phosphor-users-bold"
    },
    Settings = Window:CreateTab{
        Title = "Settings",
        Icon = "settings"
    }
}

local Options = Library.Options

Library:Notify{
    Title = "Notification",
    Content = "This is a notification",
    SubContent = "SubContent",
    Duration = 5
}

-- Character Collector Finder
local function findCharacterCollector(playerName)
    local plots = workspace:FindFirstChild("Plots")
    if not plots then
        Library:Notify{
            Title = "Error",
            Content = "Plots folder not found!",
            Duration = 5
        }
        return nil
    end
    
    -- Find player model
    local playerPlot
    for _, plot in ipairs(plots:GetChildren()) do
        if plot.Name:lower():find(playerName:lower()) then
            playerPlot = plot
            break
        end
    end
    
    if not playerPlot then
        Library:Notify{
            Title = "Error",
            Content = "Player plot not found!",
            Duration = 5
        }
        return nil
    end
    
    -- Find CharacterCollector part
    local collector = playerPlot:FindFirstChild("CharacterCollector", true)
    if not collector then
        Library:Notify{
            Title = "Error",
            Content = "CharacterCollector not found in player's plot!",
            Duration = 5
        }
        return nil
    end
    
    return collector
end

-- Create UI elements
local playerNameInput = Tabs.Main:CreateInput("PlayerName", {
    Title = "Player Name",
    Default = "",
    Placeholder = "Enter player name",
    Numeric = false,
    Finished = false
})

local findButton = Tabs.Main:CreateButton{
    Title = "Find CharacterCollector",
    Description = "Search for CharacterCollector in player's plot",
    Callback = function()
        local playerName = playerNameInput:GetValue()
        if playerName == "" then
            Library:Notify{
                Title = "Error",
                Content = "Please enter a player name!",
                Duration = 5
            }
            return
        end
        
        local collector = findCharacterCollector(playerName)
        if collector then
            Library:Notify{
                Title = "Success",
                Content = string.format("Found CharacterCollector at: %s", collector:GetFullName()),
                Duration = 5
            }
        end
    end
}

-- GoBack button replacement
Tabs.Main:CreateButton{
    Title = "GoBack",
    Description = "Return to previous menu",
    Callback = function()
        -- Add your GoBack functionality here
        Library:Notify{
            Title = "GoBack",
            Content = "GoBack button pressed",
            Duration = 2
        }
    end
}

-- Add other UI elements from your original script
local Toggle = Tabs.Main:CreateToggle("MyToggle", {Title = "Toggle", Default = false })
Toggle:OnChanged(function()
    print("Toggle changed:", Options.MyToggle.Value)
end)

-- Initialize managers
SaveManager:SetLibrary(Library)
InterfaceManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes{}
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Library:Notify{
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
}

SaveManager:LoadAutoloadConfig()
                    end
                }
            }
        }
    end
}

local Toggle = Tabs.Main:CreateToggle("MyToggle", {Title = "Toggle", Default = false })

Toggle:OnChanged(function()
    print("Toggle changed:", Options.MyToggle.Value)
end)

Options.MyToggle:SetValue(false)

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Library)
InterfaceManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes{}

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Library:Notify{
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
}

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
