local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by dawid",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

do
    Fluent:Notify({
        Title = "Notification",
        Content = "This is a notification",
        SubContent = "SubContent", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })



    Tabs.Main:AddParagraph({
        Title = "Paragraph",
        Content = "This is a paragraph.\nSecond line!"
    })



local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local savedCFrame = nil -- –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è

local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local savedCFrame = nil -- –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø–æ–∑–∏—Ü–∏—è

-- –ö–Ω–æ–ø–∫–∞ 1: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é
Tabs.Main:AddButton({
    Title = "üìå –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ—á–∫—É",
    Description = "–ó–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã",
    Callback = function()
        savedCFrame = humanoidRootPart.CFrame
        print("‚úÖ –ü–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    end
})

-- –ö–Ω–æ–ø–∫–∞ 2: –¢–µ–ª–µ–ø–æ—Ä—Ç (3 –º–µ—Ç–æ–¥–∞ –Ω–∞ –≤—ã–±–æ—Ä)
Tabs.Main:AddButton({
    Title = "üöÄ –¢–µ–ª–µ–ø–æ—Ä—Ç –Ω–∞ —Ç–æ—á–∫—É",
    Description = "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ",
    Callback = function()
        if not savedCFrame then 
            print("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π —Ç–æ—á–∫–∏!")
            return 
        end

        üî• –í–∞—Ä–∏–∞–Ω—Ç 2: –ß–µ—Ä–µ–∑ Network bypass (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞—â–∏—Ç–∞)
        humanoidRootPart.Anchored = true
        humanoidRootPart.CFrame = savedCFrame
        task.wait(0.05)
        humanoidRootPart.Anchored = false

        -- üî• –í–∞—Ä–∏–∞–Ω—Ç 3: –ß–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ Velocity + CFrame
        -- humanoidRootPart.Velocity = Vector3.zero
        -- humanoidRootPart.AssemblyLinearVelocity = Vector3.zero
        -- humanoidRootPart.CFrame = savedCFrame

        print("‚ú® –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    end
})



    local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Toggle", Default = false })

    Toggle:OnChanged(function()
        print("Toggle changed:", Options.MyToggle.Value)
    end)

    Options.MyToggle:SetValue(false)

end


-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- InterfaceManager (Allows you to have a interface managment system)

-- Hand the library over to our managers
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- You can add indexes of elements the save manager should ignore
SaveManager:SetIgnoreIndexes({})

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)


Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
